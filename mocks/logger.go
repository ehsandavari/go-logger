// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ehsandavari/go-logger (interfaces: ILogger)

// Package mocks is a generated GoMock package.
package mocks

import (
	fmt "fmt"
	http "net/http"
	reflect "reflect"
	time "time"

	contextplus "github.com/ehsandavari/go-context-plus"
	logger "github.com/ehsandavari/go-logger"
	gomock "github.com/golang/mock/gomock"
)

// MockILogger is a mock of ILogger interface.
type MockILogger struct {
	ctrl     *gomock.Controller
	recorder *MockILoggerMockRecorder
}

// MockILoggerMockRecorder is the mock recorder for MockILogger.
type MockILoggerMockRecorder struct {
	mock *MockILogger
}

// NewMockILogger creates a new mock instance.
func NewMockILogger(ctrl *gomock.Controller) *MockILogger {
	mock := &MockILogger{ctrl: ctrl}
	mock.recorder = &MockILoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogger) EXPECT() *MockILoggerMockRecorder {
	return m.recorder
}

// DPanic mocks base method.
func (m *MockILogger) DPanic(arg0 contextplus.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DPanic", arg0, arg1)
}

// DPanic indicates an expected call of DPanic.
func (mr *MockILoggerMockRecorder) DPanic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DPanic", reflect.TypeOf((*MockILogger)(nil).DPanic), arg0, arg1)
}

// Debug mocks base method.
func (m *MockILogger) Debug(arg0 contextplus.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", arg0, arg1)
}

// Debug indicates an expected call of Debug.
func (mr *MockILoggerMockRecorder) Debug(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockILogger)(nil).Debug), arg0, arg1)
}

// Error mocks base method.
func (m *MockILogger) Error(arg0 contextplus.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", arg0, arg1)
}

// Error indicates an expected call of Error.
func (mr *MockILoggerMockRecorder) Error(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockILogger)(nil).Error), arg0, arg1)
}

// Fatal mocks base method.
func (m *MockILogger) Fatal(arg0 contextplus.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fatal", arg0, arg1)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockILoggerMockRecorder) Fatal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockILogger)(nil).Fatal), arg0, arg1)
}

// Info mocks base method.
func (m *MockILogger) Info(arg0 contextplus.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", arg0, arg1)
}

// Info indicates an expected call of Info.
func (mr *MockILoggerMockRecorder) Info(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockILogger)(nil).Info), arg0, arg1)
}

// Panic mocks base method.
func (m *MockILogger) Panic(arg0 contextplus.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Panic", arg0, arg1)
}

// Panic indicates an expected call of Panic.
func (mr *MockILoggerMockRecorder) Panic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockILogger)(nil).Panic), arg0, arg1)
}

// Sync mocks base method.
func (m *MockILogger) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockILoggerMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockILogger)(nil).Sync))
}

// Warn mocks base method.
func (m *MockILogger) Warn(arg0 contextplus.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", arg0, arg1)
}

// Warn indicates an expected call of Warn.
func (mr *MockILoggerMockRecorder) Warn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockILogger)(nil).Warn), arg0, arg1)
}

// WithAny mocks base method.
func (m *MockILogger) WithAny(arg0 string, arg1 interface{}) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAny", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithAny indicates an expected call of WithAny.
func (mr *MockILoggerMockRecorder) WithAny(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAny", reflect.TypeOf((*MockILogger)(nil).WithAny), arg0, arg1)
}

// WithBinary mocks base method.
func (m *MockILogger) WithBinary(arg0 string, arg1 []byte) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithBinary", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithBinary indicates an expected call of WithBinary.
func (mr *MockILoggerMockRecorder) WithBinary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithBinary", reflect.TypeOf((*MockILogger)(nil).WithBinary), arg0, arg1)
}

// WithBool mocks base method.
func (m *MockILogger) WithBool(arg0 string, arg1 bool) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithBool", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithBool indicates an expected call of WithBool.
func (mr *MockILoggerMockRecorder) WithBool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithBool", reflect.TypeOf((*MockILogger)(nil).WithBool), arg0, arg1)
}

// WithBoolp mocks base method.
func (m *MockILogger) WithBoolp(arg0 string, arg1 *bool) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithBoolp", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithBoolp indicates an expected call of WithBoolp.
func (mr *MockILoggerMockRecorder) WithBoolp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithBoolp", reflect.TypeOf((*MockILogger)(nil).WithBoolp), arg0, arg1)
}

// WithBools mocks base method.
func (m *MockILogger) WithBools(arg0 string, arg1 []bool) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithBools", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithBools indicates an expected call of WithBools.
func (mr *MockILoggerMockRecorder) WithBools(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithBools", reflect.TypeOf((*MockILogger)(nil).WithBools), arg0, arg1)
}

// WithByteString mocks base method.
func (m *MockILogger) WithByteString(arg0 string, arg1 []byte) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithByteString", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithByteString indicates an expected call of WithByteString.
func (mr *MockILoggerMockRecorder) WithByteString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithByteString", reflect.TypeOf((*MockILogger)(nil).WithByteString), arg0, arg1)
}

// WithByteStrings mocks base method.
func (m *MockILogger) WithByteStrings(arg0 string, arg1 [][]byte) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithByteStrings", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithByteStrings indicates an expected call of WithByteStrings.
func (mr *MockILoggerMockRecorder) WithByteStrings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithByteStrings", reflect.TypeOf((*MockILogger)(nil).WithByteStrings), arg0, arg1)
}

// WithComplex128 mocks base method.
func (m *MockILogger) WithComplex128(arg0 string, arg1 complex128) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithComplex128", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithComplex128 indicates an expected call of WithComplex128.
func (mr *MockILoggerMockRecorder) WithComplex128(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithComplex128", reflect.TypeOf((*MockILogger)(nil).WithComplex128), arg0, arg1)
}

// WithComplex128p mocks base method.
func (m *MockILogger) WithComplex128p(arg0 string, arg1 *complex128) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithComplex128p", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithComplex128p indicates an expected call of WithComplex128p.
func (mr *MockILoggerMockRecorder) WithComplex128p(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithComplex128p", reflect.TypeOf((*MockILogger)(nil).WithComplex128p), arg0, arg1)
}

// WithComplex128s mocks base method.
func (m *MockILogger) WithComplex128s(arg0 string, arg1 []complex128) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithComplex128s", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithComplex128s indicates an expected call of WithComplex128s.
func (mr *MockILoggerMockRecorder) WithComplex128s(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithComplex128s", reflect.TypeOf((*MockILogger)(nil).WithComplex128s), arg0, arg1)
}

// WithComplex64 mocks base method.
func (m *MockILogger) WithComplex64(arg0 string, arg1 complex64) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithComplex64", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithComplex64 indicates an expected call of WithComplex64.
func (mr *MockILoggerMockRecorder) WithComplex64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithComplex64", reflect.TypeOf((*MockILogger)(nil).WithComplex64), arg0, arg1)
}

// WithComplex64p mocks base method.
func (m *MockILogger) WithComplex64p(arg0 string, arg1 *complex64) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithComplex64p", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithComplex64p indicates an expected call of WithComplex64p.
func (mr *MockILoggerMockRecorder) WithComplex64p(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithComplex64p", reflect.TypeOf((*MockILogger)(nil).WithComplex64p), arg0, arg1)
}

// WithComplex64s mocks base method.
func (m *MockILogger) WithComplex64s(arg0 string, arg1 []complex64) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithComplex64s", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithComplex64s indicates an expected call of WithComplex64s.
func (mr *MockILoggerMockRecorder) WithComplex64s(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithComplex64s", reflect.TypeOf((*MockILogger)(nil).WithComplex64s), arg0, arg1)
}

// WithDuration mocks base method.
func (m *MockILogger) WithDuration(arg0 string, arg1 time.Duration) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDuration", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithDuration indicates an expected call of WithDuration.
func (mr *MockILoggerMockRecorder) WithDuration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDuration", reflect.TypeOf((*MockILogger)(nil).WithDuration), arg0, arg1)
}

// WithDurationp mocks base method.
func (m *MockILogger) WithDurationp(arg0 string, arg1 *time.Duration) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDurationp", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithDurationp indicates an expected call of WithDurationp.
func (mr *MockILoggerMockRecorder) WithDurationp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDurationp", reflect.TypeOf((*MockILogger)(nil).WithDurationp), arg0, arg1)
}

// WithDurations mocks base method.
func (m *MockILogger) WithDurations(arg0 string, arg1 []time.Duration) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDurations", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithDurations indicates an expected call of WithDurations.
func (mr *MockILoggerMockRecorder) WithDurations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDurations", reflect.TypeOf((*MockILogger)(nil).WithDurations), arg0, arg1)
}

// WithError mocks base method.
func (m *MockILogger) WithError(arg0 error) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithError", arg0)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithError indicates an expected call of WithError.
func (mr *MockILoggerMockRecorder) WithError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithError", reflect.TypeOf((*MockILogger)(nil).WithError), arg0)
}

// WithErrors mocks base method.
func (m *MockILogger) WithErrors(arg0 string, arg1 []error) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithErrors", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithErrors indicates an expected call of WithErrors.
func (mr *MockILoggerMockRecorder) WithErrors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithErrors", reflect.TypeOf((*MockILogger)(nil).WithErrors), arg0, arg1)
}

// WithFloat32 mocks base method.
func (m *MockILogger) WithFloat32(arg0 string, arg1 float32) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFloat32", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithFloat32 indicates an expected call of WithFloat32.
func (mr *MockILoggerMockRecorder) WithFloat32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFloat32", reflect.TypeOf((*MockILogger)(nil).WithFloat32), arg0, arg1)
}

// WithFloat32p mocks base method.
func (m *MockILogger) WithFloat32p(arg0 string, arg1 *float32) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFloat32p", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithFloat32p indicates an expected call of WithFloat32p.
func (mr *MockILoggerMockRecorder) WithFloat32p(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFloat32p", reflect.TypeOf((*MockILogger)(nil).WithFloat32p), arg0, arg1)
}

// WithFloat32s mocks base method.
func (m *MockILogger) WithFloat32s(arg0 string, arg1 []float32) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFloat32s", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithFloat32s indicates an expected call of WithFloat32s.
func (mr *MockILoggerMockRecorder) WithFloat32s(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFloat32s", reflect.TypeOf((*MockILogger)(nil).WithFloat32s), arg0, arg1)
}

// WithFloat64 mocks base method.
func (m *MockILogger) WithFloat64(arg0 string, arg1 float64) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFloat64", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithFloat64 indicates an expected call of WithFloat64.
func (mr *MockILoggerMockRecorder) WithFloat64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFloat64", reflect.TypeOf((*MockILogger)(nil).WithFloat64), arg0, arg1)
}

// WithFloat64p mocks base method.
func (m *MockILogger) WithFloat64p(arg0 string, arg1 *float64) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFloat64p", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithFloat64p indicates an expected call of WithFloat64p.
func (mr *MockILoggerMockRecorder) WithFloat64p(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFloat64p", reflect.TypeOf((*MockILogger)(nil).WithFloat64p), arg0, arg1)
}

// WithFloat64s mocks base method.
func (m *MockILogger) WithFloat64s(arg0 string, arg1 []float64) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFloat64s", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithFloat64s indicates an expected call of WithFloat64s.
func (mr *MockILoggerMockRecorder) WithFloat64s(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFloat64s", reflect.TypeOf((*MockILogger)(nil).WithFloat64s), arg0, arg1)
}

// WithHttpRequest mocks base method.
func (m *MockILogger) WithHttpRequest(arg0 *http.Request) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithHttpRequest", arg0)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithHttpRequest indicates an expected call of WithHttpRequest.
func (mr *MockILoggerMockRecorder) WithHttpRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithHttpRequest", reflect.TypeOf((*MockILogger)(nil).WithHttpRequest), arg0)
}

// WithHttpResponse mocks base method.
func (m *MockILogger) WithHttpResponse(arg0 *http.Response) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithHttpResponse", arg0)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithHttpResponse indicates an expected call of WithHttpResponse.
func (mr *MockILoggerMockRecorder) WithHttpResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithHttpResponse", reflect.TypeOf((*MockILogger)(nil).WithHttpResponse), arg0)
}

// WithInt mocks base method.
func (m *MockILogger) WithInt(arg0 string, arg1 int) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithInt", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithInt indicates an expected call of WithInt.
func (mr *MockILoggerMockRecorder) WithInt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInt", reflect.TypeOf((*MockILogger)(nil).WithInt), arg0, arg1)
}

// WithInt16 mocks base method.
func (m *MockILogger) WithInt16(arg0 string, arg1 int16) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithInt16", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithInt16 indicates an expected call of WithInt16.
func (mr *MockILoggerMockRecorder) WithInt16(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInt16", reflect.TypeOf((*MockILogger)(nil).WithInt16), arg0, arg1)
}

// WithInt16p mocks base method.
func (m *MockILogger) WithInt16p(arg0 string, arg1 *int16) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithInt16p", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithInt16p indicates an expected call of WithInt16p.
func (mr *MockILoggerMockRecorder) WithInt16p(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInt16p", reflect.TypeOf((*MockILogger)(nil).WithInt16p), arg0, arg1)
}

// WithInt16s mocks base method.
func (m *MockILogger) WithInt16s(arg0 string, arg1 []int16) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithInt16s", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithInt16s indicates an expected call of WithInt16s.
func (mr *MockILoggerMockRecorder) WithInt16s(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInt16s", reflect.TypeOf((*MockILogger)(nil).WithInt16s), arg0, arg1)
}

// WithInt32 mocks base method.
func (m *MockILogger) WithInt32(arg0 string, arg1 int32) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithInt32", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithInt32 indicates an expected call of WithInt32.
func (mr *MockILoggerMockRecorder) WithInt32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInt32", reflect.TypeOf((*MockILogger)(nil).WithInt32), arg0, arg1)
}

// WithInt32p mocks base method.
func (m *MockILogger) WithInt32p(arg0 string, arg1 *int32) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithInt32p", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithInt32p indicates an expected call of WithInt32p.
func (mr *MockILoggerMockRecorder) WithInt32p(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInt32p", reflect.TypeOf((*MockILogger)(nil).WithInt32p), arg0, arg1)
}

// WithInt32s mocks base method.
func (m *MockILogger) WithInt32s(arg0 string, arg1 []int32) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithInt32s", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithInt32s indicates an expected call of WithInt32s.
func (mr *MockILoggerMockRecorder) WithInt32s(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInt32s", reflect.TypeOf((*MockILogger)(nil).WithInt32s), arg0, arg1)
}

// WithInt64 mocks base method.
func (m *MockILogger) WithInt64(arg0 string, arg1 int64) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithInt64", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithInt64 indicates an expected call of WithInt64.
func (mr *MockILoggerMockRecorder) WithInt64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInt64", reflect.TypeOf((*MockILogger)(nil).WithInt64), arg0, arg1)
}

// WithInt64p mocks base method.
func (m *MockILogger) WithInt64p(arg0 string, arg1 *int64) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithInt64p", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithInt64p indicates an expected call of WithInt64p.
func (mr *MockILoggerMockRecorder) WithInt64p(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInt64p", reflect.TypeOf((*MockILogger)(nil).WithInt64p), arg0, arg1)
}

// WithInt64s mocks base method.
func (m *MockILogger) WithInt64s(arg0 string, arg1 []int64) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithInt64s", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithInt64s indicates an expected call of WithInt64s.
func (mr *MockILoggerMockRecorder) WithInt64s(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInt64s", reflect.TypeOf((*MockILogger)(nil).WithInt64s), arg0, arg1)
}

// WithInt8 mocks base method.
func (m *MockILogger) WithInt8(arg0 string, arg1 int8) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithInt8", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithInt8 indicates an expected call of WithInt8.
func (mr *MockILoggerMockRecorder) WithInt8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInt8", reflect.TypeOf((*MockILogger)(nil).WithInt8), arg0, arg1)
}

// WithInt8p mocks base method.
func (m *MockILogger) WithInt8p(arg0 string, arg1 *int8) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithInt8p", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithInt8p indicates an expected call of WithInt8p.
func (mr *MockILoggerMockRecorder) WithInt8p(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInt8p", reflect.TypeOf((*MockILogger)(nil).WithInt8p), arg0, arg1)
}

// WithInt8s mocks base method.
func (m *MockILogger) WithInt8s(arg0 string, arg1 []int8) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithInt8s", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithInt8s indicates an expected call of WithInt8s.
func (mr *MockILoggerMockRecorder) WithInt8s(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInt8s", reflect.TypeOf((*MockILogger)(nil).WithInt8s), arg0, arg1)
}

// WithIntp mocks base method.
func (m *MockILogger) WithIntp(arg0 string, arg1 *int) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithIntp", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithIntp indicates an expected call of WithIntp.
func (mr *MockILoggerMockRecorder) WithIntp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithIntp", reflect.TypeOf((*MockILogger)(nil).WithIntp), arg0, arg1)
}

// WithInts mocks base method.
func (m *MockILogger) WithInts(arg0 string, arg1 []int) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithInts", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithInts indicates an expected call of WithInts.
func (mr *MockILoggerMockRecorder) WithInts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInts", reflect.TypeOf((*MockILogger)(nil).WithInts), arg0, arg1)
}

// WithNamedError mocks base method.
func (m *MockILogger) WithNamedError(arg0 string, arg1 error) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithNamedError", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithNamedError indicates an expected call of WithNamedError.
func (mr *MockILoggerMockRecorder) WithNamedError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithNamedError", reflect.TypeOf((*MockILogger)(nil).WithNamedError), arg0, arg1)
}

// WithNamespace mocks base method.
func (m *MockILogger) WithNamespace(arg0 string) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithNamespace", arg0)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithNamespace indicates an expected call of WithNamespace.
func (mr *MockILoggerMockRecorder) WithNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithNamespace", reflect.TypeOf((*MockILogger)(nil).WithNamespace), arg0)
}

// WithReflect mocks base method.
func (m *MockILogger) WithReflect(arg0 string, arg1 interface{}) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithReflect", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithReflect indicates an expected call of WithReflect.
func (mr *MockILoggerMockRecorder) WithReflect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithReflect", reflect.TypeOf((*MockILogger)(nil).WithReflect), arg0, arg1)
}

// WithStack mocks base method.
func (m *MockILogger) WithStack(arg0 string) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStack", arg0)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithStack indicates an expected call of WithStack.
func (mr *MockILoggerMockRecorder) WithStack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStack", reflect.TypeOf((*MockILogger)(nil).WithStack), arg0)
}

// WithStackSkip mocks base method.
func (m *MockILogger) WithStackSkip(arg0 string, arg1 int) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStackSkip", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithStackSkip indicates an expected call of WithStackSkip.
func (mr *MockILoggerMockRecorder) WithStackSkip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStackSkip", reflect.TypeOf((*MockILogger)(nil).WithStackSkip), arg0, arg1)
}

// WithString mocks base method.
func (m *MockILogger) WithString(arg0, arg1 string) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithString", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithString indicates an expected call of WithString.
func (mr *MockILoggerMockRecorder) WithString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithString", reflect.TypeOf((*MockILogger)(nil).WithString), arg0, arg1)
}

// WithStringer mocks base method.
func (m *MockILogger) WithStringer(arg0 string, arg1 fmt.Stringer) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStringer", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithStringer indicates an expected call of WithStringer.
func (mr *MockILoggerMockRecorder) WithStringer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStringer", reflect.TypeOf((*MockILogger)(nil).WithStringer), arg0, arg1)
}

// WithStringers mocks base method.
func (m *MockILogger) WithStringers(arg0 string, arg1 []fmt.Stringer) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStringers", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithStringers indicates an expected call of WithStringers.
func (mr *MockILoggerMockRecorder) WithStringers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStringers", reflect.TypeOf((*MockILogger)(nil).WithStringers), arg0, arg1)
}

// WithStringp mocks base method.
func (m *MockILogger) WithStringp(arg0 string, arg1 *string) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStringp", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithStringp indicates an expected call of WithStringp.
func (mr *MockILoggerMockRecorder) WithStringp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStringp", reflect.TypeOf((*MockILogger)(nil).WithStringp), arg0, arg1)
}

// WithStrings mocks base method.
func (m *MockILogger) WithStrings(arg0 string, arg1 []string) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStrings", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithStrings indicates an expected call of WithStrings.
func (mr *MockILoggerMockRecorder) WithStrings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStrings", reflect.TypeOf((*MockILogger)(nil).WithStrings), arg0, arg1)
}

// WithTime mocks base method.
func (m *MockILogger) WithTime(arg0 string, arg1 time.Time) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTime", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithTime indicates an expected call of WithTime.
func (mr *MockILoggerMockRecorder) WithTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTime", reflect.TypeOf((*MockILogger)(nil).WithTime), arg0, arg1)
}

// WithTimep mocks base method.
func (m *MockILogger) WithTimep(arg0 string, arg1 *time.Time) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTimep", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithTimep indicates an expected call of WithTimep.
func (mr *MockILoggerMockRecorder) WithTimep(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTimep", reflect.TypeOf((*MockILogger)(nil).WithTimep), arg0, arg1)
}

// WithTimes mocks base method.
func (m *MockILogger) WithTimes(arg0 string, arg1 []time.Time) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTimes", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithTimes indicates an expected call of WithTimes.
func (mr *MockILoggerMockRecorder) WithTimes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTimes", reflect.TypeOf((*MockILogger)(nil).WithTimes), arg0, arg1)
}

// WithUint mocks base method.
func (m *MockILogger) WithUint(arg0 string, arg1 uint) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUint", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUint indicates an expected call of WithUint.
func (mr *MockILoggerMockRecorder) WithUint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUint", reflect.TypeOf((*MockILogger)(nil).WithUint), arg0, arg1)
}

// WithUint16 mocks base method.
func (m *MockILogger) WithUint16(arg0 string, arg1 uint16) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUint16", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUint16 indicates an expected call of WithUint16.
func (mr *MockILoggerMockRecorder) WithUint16(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUint16", reflect.TypeOf((*MockILogger)(nil).WithUint16), arg0, arg1)
}

// WithUint16p mocks base method.
func (m *MockILogger) WithUint16p(arg0 string, arg1 *uint16) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUint16p", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUint16p indicates an expected call of WithUint16p.
func (mr *MockILoggerMockRecorder) WithUint16p(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUint16p", reflect.TypeOf((*MockILogger)(nil).WithUint16p), arg0, arg1)
}

// WithUint16s mocks base method.
func (m *MockILogger) WithUint16s(arg0 string, arg1 []uint16) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUint16s", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUint16s indicates an expected call of WithUint16s.
func (mr *MockILoggerMockRecorder) WithUint16s(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUint16s", reflect.TypeOf((*MockILogger)(nil).WithUint16s), arg0, arg1)
}

// WithUint32 mocks base method.
func (m *MockILogger) WithUint32(arg0 string, arg1 uint32) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUint32", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUint32 indicates an expected call of WithUint32.
func (mr *MockILoggerMockRecorder) WithUint32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUint32", reflect.TypeOf((*MockILogger)(nil).WithUint32), arg0, arg1)
}

// WithUint32p mocks base method.
func (m *MockILogger) WithUint32p(arg0 string, arg1 *uint32) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUint32p", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUint32p indicates an expected call of WithUint32p.
func (mr *MockILoggerMockRecorder) WithUint32p(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUint32p", reflect.TypeOf((*MockILogger)(nil).WithUint32p), arg0, arg1)
}

// WithUint32s mocks base method.
func (m *MockILogger) WithUint32s(arg0 string, arg1 []uint32) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUint32s", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUint32s indicates an expected call of WithUint32s.
func (mr *MockILoggerMockRecorder) WithUint32s(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUint32s", reflect.TypeOf((*MockILogger)(nil).WithUint32s), arg0, arg1)
}

// WithUint64 mocks base method.
func (m *MockILogger) WithUint64(arg0 string, arg1 uint64) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUint64", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUint64 indicates an expected call of WithUint64.
func (mr *MockILoggerMockRecorder) WithUint64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUint64", reflect.TypeOf((*MockILogger)(nil).WithUint64), arg0, arg1)
}

// WithUint64p mocks base method.
func (m *MockILogger) WithUint64p(arg0 string, arg1 *uint64) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUint64p", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUint64p indicates an expected call of WithUint64p.
func (mr *MockILoggerMockRecorder) WithUint64p(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUint64p", reflect.TypeOf((*MockILogger)(nil).WithUint64p), arg0, arg1)
}

// WithUint64s mocks base method.
func (m *MockILogger) WithUint64s(arg0 string, arg1 []uint64) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUint64s", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUint64s indicates an expected call of WithUint64s.
func (mr *MockILoggerMockRecorder) WithUint64s(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUint64s", reflect.TypeOf((*MockILogger)(nil).WithUint64s), arg0, arg1)
}

// WithUint8 mocks base method.
func (m *MockILogger) WithUint8(arg0 string, arg1 byte) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUint8", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUint8 indicates an expected call of WithUint8.
func (mr *MockILoggerMockRecorder) WithUint8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUint8", reflect.TypeOf((*MockILogger)(nil).WithUint8), arg0, arg1)
}

// WithUint8p mocks base method.
func (m *MockILogger) WithUint8p(arg0 string, arg1 *byte) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUint8p", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUint8p indicates an expected call of WithUint8p.
func (mr *MockILoggerMockRecorder) WithUint8p(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUint8p", reflect.TypeOf((*MockILogger)(nil).WithUint8p), arg0, arg1)
}

// WithUint8s mocks base method.
func (m *MockILogger) WithUint8s(arg0 string, arg1 []byte) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUint8s", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUint8s indicates an expected call of WithUint8s.
func (mr *MockILoggerMockRecorder) WithUint8s(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUint8s", reflect.TypeOf((*MockILogger)(nil).WithUint8s), arg0, arg1)
}

// WithUintp mocks base method.
func (m *MockILogger) WithUintp(arg0 string, arg1 *uint) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUintp", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUintp indicates an expected call of WithUintp.
func (mr *MockILoggerMockRecorder) WithUintp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUintp", reflect.TypeOf((*MockILogger)(nil).WithUintp), arg0, arg1)
}

// WithUintptr mocks base method.
func (m *MockILogger) WithUintptr(arg0 string, arg1 uintptr) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUintptr", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUintptr indicates an expected call of WithUintptr.
func (mr *MockILoggerMockRecorder) WithUintptr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUintptr", reflect.TypeOf((*MockILogger)(nil).WithUintptr), arg0, arg1)
}

// WithUintptrp mocks base method.
func (m *MockILogger) WithUintptrp(arg0 string, arg1 *uintptr) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUintptrp", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUintptrp indicates an expected call of WithUintptrp.
func (mr *MockILoggerMockRecorder) WithUintptrp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUintptrp", reflect.TypeOf((*MockILogger)(nil).WithUintptrp), arg0, arg1)
}

// WithUintptrs mocks base method.
func (m *MockILogger) WithUintptrs(arg0 string, arg1 []uintptr) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUintptrs", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUintptrs indicates an expected call of WithUintptrs.
func (mr *MockILoggerMockRecorder) WithUintptrs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUintptrs", reflect.TypeOf((*MockILogger)(nil).WithUintptrs), arg0, arg1)
}

// WithUints mocks base method.
func (m *MockILogger) WithUints(arg0 string, arg1 []uint) logger.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUints", arg0, arg1)
	ret0, _ := ret[0].(logger.ILogger)
	return ret0
}

// WithUints indicates an expected call of WithUints.
func (mr *MockILoggerMockRecorder) WithUints(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUints", reflect.TypeOf((*MockILogger)(nil).WithUints), arg0, arg1)
}
